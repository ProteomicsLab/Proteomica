import java.awt.Button;
import java.awt.Checkbox;
import java.awt.CheckboxGroup;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dialog;
import java.awt.Event;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Label;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

import org.omg.CORBA.PRIVATE_MEMBER;

import ij.IJ;
import ij.ImagePlus;
import ij.ImageStack;
import ij.Prefs;
import ij.WindowManager;
import ij.gui.GUI;
import ij.gui.GenericDialog;
import ij.gui.ImageCanvas;
import ij.gui.ImageWindow;
import ij.gui.OvalRoi;
import ij.gui.Roi;
import ij.gui.StackWindow;
import ij.io.Opener;
import ij.measure.Measurements;
import ij.measure.ResultsTable;
import ij.plugin.Commands;
import ij.plugin.ImagesToStack;
import ij.plugin.PlugIn;
import ij.plugin.filter.Analyzer;
import ij.plugin.filter.BackgroundSubtracter;
import ij.plugin.filter.GaussianBlur;
import ij.plugin.filter.ParticleAnalyzer;
import ij.plugin.filter.PlugInFilterRunner;
import ij.plugin.filter.Profiler;
import ij.plugin.filter.RankFilters;
import ij.plugin.frame.RoiManager;
import ij.process.ImageProcessor;
import ij.process.ImageStatistics;

public class Proteomica_ implements PlugIn{
	ImagePlus imp;
	@Override
	public void run(String arg) {
		final ProteinProfiler mp = new ProteinProfiler();
	}	
}

class ProteinProfiler extends JFrame implements  ActionListener, WindowListener, ItemListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	ImageStack stack;
    public static final String[] roiTypes = {"Circles","Rectangles"};
	int numSlices;
	ImagePlus imp;
	ImageCanvas ic;

	private GridBagLayout layout = new GridBagLayout();
  	private GridBagConstraints constraint = new GridBagConstraints();
    private JButton bnOpenMatchSet, bnAutoPreProcess, bnAutoWarp, bnMeanParentGel, bnAutoSegment, bnSpotManager, bnAutoQuantify, bnGenerateStats, bnHelp, bnExit;
    private JButton bn3DView, bnSpotProfile;
    private JPanel pnSetupExpr, pnGelMatch, pnSpotDetections, pnResultsUtility, pnMiscellaneous, pnMain;   
	Panel panel;
	
	private Font font = new Font("Arial", 0, 9);
	
	Checkbox manyFiles, oneFile, resultTable;
	CheckboxGroup outputType;
	int rows,columns,diameter,width,height,roiChoice;
	String outPath,gridDirectory,outFile;
	int INVALID = -9999999;
	int decimalPlaces = 2;

	public ProteinProfiler(){
	    super("Proteomica-IIT Bombay");
	    this.imp = imp;
	    setTitle("Proteomica-IIT Bombay");
		addWindowListener(this);
		setup(); //setting up the workflow's buttons controls for 2De gel images
	}
	public void setup() {

		bnOpenMatchSet = new JButton("Matchset");//button for creating match set
		bnOpenMatchSet.addActionListener(this);
		
		bnAutoPreProcess = new JButton("Pre-Process");//button for pre-processing of the gel images
		bnAutoPreProcess.addActionListener(this);
		
		bnAutoWarp = new JButton("Match & Align");// button for to auto warp the gel image with reference with unwarpJ
		bnAutoWarp.addActionListener(this);
		
		bnMeanParentGel = new JButton("Global Gel");// button for creating the global mean gel generated by summing the all the aligned gel and reference gel  
		bnMeanParentGel.addActionListener(this);
		
		bnAutoSegment = new JButton("Segment");// button for  segmentation of the mean gel with pre-set default parameters 
												//optimised for the segmentation of the gel images
		bnAutoSegment.addActionListener(this);
		
		bnSpotManager = new JButton("Spot Manager");// button for  segmentation of the mean gel with pre-set default parameters 
		bnSpotManager.addActionListener(this);		
		
		bnAutoQuantify = new JButton("Quantify");// button for quantification of the detected roi(protein spots on all gel images individually)
		bnAutoQuantify.addActionListener(this);
		
		bnGenerateStats = new JButton("Statistics");// button for generating statistics of all  
		bnGenerateStats.addActionListener(this);
		
		bn3DView = new JButton("3D View");
		bn3DView.addActionListener(this);
		
		bnSpotProfile = new JButton("Profile Plots");
		bnSpotProfile.addActionListener(this);
		
		bnExit = new JButton("Exit");
		bnExit.addActionListener(this);
		
		bnHelp = new JButton("Help");
		bnHelp.addActionListener(this);

		
	    JTextArea txtCopyright = new JTextArea(2, 20);
	    JTextArea txtInfo = new JTextArea(1,20);
	    txtInfo.append("Proteomica ver 1.0\n");
	    txtInfo.setFont(new Font("Sans-Serif", Font.BOLD, 20));
	    txtInfo.setForeground(new Color(0, 32, 128));
	    txtInfo.setBackground(getBackground());
	    txtInfo.setBorder(BorderFactory.createEtchedBorder());
	    txtInfo.setAlignmentX(0);

	    txtCopyright.append("Copyright(c)2013\nBhushan N Kharbikar, Proteomics Lab, \nDepartment of Biosciences and Bioengineering,\nIndian Institute of Technology Bombay");

	    txtCopyright.setFont(this.font);
	    txtCopyright.setBorder(BorderFactory.createEtchedBorder());
	    txtCopyright.setForeground(new Color(0, 32, 128));
	    txtCopyright.setBackground(getBackground());

	    //Start : Added by Bhushan N Kharbikar this panel define the commands and controls for the setting up the experiments 
	    pnSetupExpr = new JPanel();
	    pnSetupExpr.setLayout(this.layout);
	    pnSetupExpr.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Set up an Experiment "));
	    addComponent(pnSetupExpr, 0, 0, 1, 1, 4, this.bnOpenMatchSet);
	    addComponent(pnSetupExpr, 0, 1, 1, 1, 4, this.bnAutoPreProcess);
	    //Stop : Added by Bhushan N Kharbikar this panel define the commands and controls for the setting up the experiments
	    
	    //Start : Added by Bhushan N Kharbikar this panel define the commands and controls for aligning the gel images and creating the mean global gel 
	    pnGelMatch = new JPanel();
	    pnGelMatch.setLayout(this.layout);
	    pnGelMatch.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Gel Image Matching "));
	    addComponent(pnGelMatch, 0, 0, 1, 1, 4, this.bnAutoWarp);
	    addComponent(pnGelMatch, 0, 1, 1, 1, 4, this.bnMeanParentGel);
	    //Stop : Added by Bhushan N Kharbikar this panel define the commands and controls for aligning the gel images and creating the mean global gel

	    //Start : Added by Bhushan N Kharbikar this panel define the commands and controls for Spot detection and quantification 
	    pnSpotDetections = new JPanel();
	    pnSpotDetections.setLayout(this.layout);
	    pnSpotDetections.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Spot Detection "));
	    addComponent(pnSpotDetections, 0, 0, 1, 1, 4, this.bnAutoSegment);
	    addComponent(pnSpotDetections, 0, 1, 1, 1, 4, this.bnAutoQuantify);
	    //Stop : Added by Bhushan N Kharbikar this panel define the commands and controls for Spot detection and quantification
		
	    //Start : Added by Bhushan N Kharbikar this panel define the commands and controls for the results and the utility tools  
	    pnResultsUtility = new JPanel();
	    pnResultsUtility.setLayout(this.layout);
	    pnResultsUtility.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Results and Utility tools "));
	    addComponent(pnResultsUtility, 0, 0, 1, 1, 4, this.bnSpotManager);
	    addComponent(pnResultsUtility, 0, 1, 1, 1, 4, this.bnGenerateStats);
	    addComponent(pnResultsUtility, 1, 0, 1, 1, 4, this.bn3DView);
	    addComponent(pnResultsUtility, 1, 1, 1, 1, 4, this.bnSpotProfile);
	    
	    //Stop : Added by Bhushan N Kharbikar this panel define the commands and controls for the results and the utility tools

	    pnMiscellaneous = new JPanel();
	    pnMiscellaneous.setLayout(this.layout);
	    addComponent(pnMiscellaneous, 0, 0, 1, 1, 4, this.bnHelp);
	    addComponent(pnMiscellaneous, 0, 1, 1, 1, 4, this.bnExit);
	    
	    JPanel pnMain = new JPanel();
	    pnMain.setLayout(this.layout);
	    addComponent(pnMain, 0, 0, 1, 1, 4, txtInfo );
	    addComponent(pnMain, 1, 0, 1, 1, 4, pnSetupExpr);
	    addComponent(pnMain, 2, 0, 1, 1, 4, pnGelMatch);
	    addComponent(pnMain, 3, 0, 1, 1, 4, pnSpotDetections);
	    addComponent(pnMain, 4, 0, 1, 1, 4, pnResultsUtility);
	    addComponent(pnMain, 5, 0, 1, 1, 4, pnMiscellaneous);
	    addComponent(pnMain, 6, 0, 1, 1, 4, txtCopyright);
	    	   		
		panel = new Panel();
		panel.setLayout(new GridLayout(1,3,5,5));
		Label l = new Label("Command Workflow",Label.CENTER);
		add(l);

	    addWindowListener(this);
	    JPanel pnMain1 = new JPanel();
	    pnMain1.setLayout(this.layout);
	    addComponent(pnMain1, 0, 0, 1, 1, 9, pnMain);
	    add(pnMain1);
	    pack();
	    setResizable(false);
	    GUI.center(this);
	    
	    WelcomeSplash splash = new WelcomeSplash(10000/2);
	    splash.showSplashAndExit();
	    	    
	    setVisible(true);
    }
	
	
	public synchronized void  actionPerformed(ActionEvent e) {
		Object b = e.getSource();
		if (b == this.bnOpenMatchSet){
			doOpenMatchSet(); 
		} else if (b == this.bnAutoPreProcess){
			doAutoPreProcess();
		} else if (b == this.bnAutoWarp){
			doAutoWarp();
		} else if (b == this.bnMeanParentGel){
			doMeanParentGel();
		} else if (b == this.bnAutoSegment){
			doAutoSegment();
		} else if (b == this.bnSpotManager){
			openSpotManager();			
		} else if (b == this.bnAutoQuantify){
			doAutoQuantify();
		} else if (b == this.bnGenerateStats){ 
			doGenerateStatsics();
		} else if (b == this.bn3DView){
			exe3DView();			
		} else if (b == this.bnSpotProfile){
			exeSpotProfile();						
		} else if (b == bnExit){
			shutDown();
		}
	}

	
	public void doOpenMatchSet() { //creating the match-set for 2DE gel images for further analysis
		if (SwingUtilities.isEventDispatchThread()) {
		    // set of code here
				new Opener().openMulEventDispThrd();
		} else {
			if (Prefs.useJFileChooser && !IJ.macroRunning())
				new Opener().openMultiple();
			else
				new Opener().open();
			}			
		
		try {
			imp = IJ.getImage();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			IJ.error("1. Try reopening Image  \n2. Check for suppoted image formats  ");
		} 
	}
	
	public void doAutoPreProcess() {
		RankFilters RF= new RankFilters();	
		GaussianBlur GB = new GaussianBlur();
		BackgroundSubtracter BS = new BackgroundSubtracter();
		//calling constructor for preprocessing of the 2DE gel image 
		new PlugInFilterRunner(RF, "Despeckle", "despeckle");
		new PlugInFilterRunner(RF, "Median...", "median");
		new PlugInFilterRunner(GB, "Gaussian Blur...", "");
		new PlugInFilterRunner(BS, "Subtract Background...", "");
	}

	public void doAutoWarp() {
		AutoWarp autoWarp2DE = new AutoWarp();
		autoWarp2DE.run("");
	}

	public void doMeanParentGel() {
		ImagesToStack i2s = new ImagesToStack();
		ImageZSum izs = new ImageZSum();
		WindowManager.closeAllWindows();
		doOpenMatchSet();
		i2s.run("");
		izs.run("");
	}

	public void doAutoSegment() {
		// TODO Auto-generated method stub
		new WatershedConstructions();
		//notify();
/*		ParticleAnalyzer pa = new ParticleAnalyzer();
		new PlugInFilterRunner(pa, "Analyze Particles...", "");
*/	}
	
	private void openSpotManager() {
		new RoiManager();
		
	}

	public void doAutoQuantify() {
		// TODO Auto-generated method stub
		ImagePlus imp = IJ.getImage();
		RoiManager rm = RoiManager.getInstance2();
		if (rm==null) {
			IJ.error("Spot Manager is not open");
			return;
		}
		Roi[] rois = rm.getRoisAsArray();
		if (rois.length==0) {
			IJ.error("Spot Manager is empty");
			return;
		}
		rm.moveRoisToOverlay(imp);
		imp.deleteRoi();
	}

	public void doGenerateStatsics() {
		// TODO Auto-generated method stub
		final int COMMAND = 1;
		IJ.showMessage("Generating stats");
		ImagePlus imp = IJ.getImage();
		RoiManager rm = RoiManager.getInstance2();
		if (rm==null) {
			IJ.error("Spot Manager is not open");
			return;
		}
		Roi[] rois = rm.getRoisAsArray();
		if (rois.length==0) {
			IJ.error("Spot Manager is empty");
			return;
		}
		if(imp.getNSlices()>1){
			rm.runCommand("multi measure");
		}else {
			rm.runCommand("measure");
		}
	}
	

	public void exe3DView() {
		Interactive_Surface_Plot I3DSP = new Interactive_Surface_Plot();
		I3DSP.run("");
	}
	
	public void exeSpotProfile() {
		final int COMMAND = 1;
		ImagePlus imp = IJ.getImage();
		RoiManager rm = RoiManager.getInstance2();
		Profiler prof = new Profiler();
		if (rm==null) {
			IJ.error("Spot Manager is not open");
			return;
		}
		Roi[] rois = rm.getRoisAsArray();
		if (rois.length==0) {
			IJ.error("Spot Manager is empty");
			return;
		}
		if(imp.getNSlices()>1){
			rm.runCommand("multi plot");
		}else {
			new PlugInFilterRunner(prof, "Plot Profile", "plot");

		}
	}
	
	  private void addComponent(JPanel pn, int row, int col, int width, int height, int space, JComponent comp)
	  { 
	    this.constraint.gridx = col;
	    this.constraint.gridy = row;
	    this.constraint.gridwidth = width;
	    this.constraint.gridheight = height;
	    this.constraint.anchor = 18;
	    this.constraint.insets = new Insets(space, space, space, space);
	    this.constraint.weightx = (IJ.isMacintosh() ? 90.0D : 100.0D);
	    this.constraint.fill = 2;
	    this.layout.setConstraints(comp, this.constraint);
	    pn.add(comp);
	  }
	  
	  public void shutDown(){
		  hide();
		  dispose();
	  }

	@Override
	public void itemStateChanged(ItemEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void windowOpened(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void windowClosing(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void windowClosed(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void windowIconified(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void windowDeiconified(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void windowActivated(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void windowDeactivated(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

}//class ProteinProfiler

